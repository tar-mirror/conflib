This is Info file conflib.info, produced by Makeinfo version 1.68 from
the input file conflib.texi.

START-INFO-DIR-ENTRY
* Conflib: (conflib.info).         Configuration File Handling
END-INFO-DIR-ENTRY

   This file documents `conflib', a runtime configuration library for
programs written in C.

   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998 by Uwe Ohse

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by Uwe Ohse.


File: conflib.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)



Hauptmenue
**********

   This is the manual for Conflib, {No Value For "version"}.

* Menu:

* Copying::               Copyright
* overview::              blurb ...
* configuration files::   configuration file format
* programming::           programming with the library
* Ersetzung::             Textersetzungsroutinen (still german)
* todo::                  what's left
* Index::                 concept index


File: conflib.info,  Node: Copying,  Next: overview,  Prev: Top,  Up: Top

GNU LIBRARY GENERAL PUBLIC LICENSE
**********************************

                         Version 2, June 1991

     Copyright (C) 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.
     
     [This is the first released version of the library GPL.  It is
      numbered 2 because it goes with version 2 of the ordinary GPL.]

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

   This license, the Library General Public License, applies to some
specially designated Free Software Foundation software, and to any
other libraries whose authors decide to use it.  You can use it for
your libraries, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the library, or if you modify it.

   For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link a program with the library, you must provide
complete object files to the recipients so that they can relink them
with the library, after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

   Our method of protecting your rights has two steps: (1) copyright
the library, and (2) offer you this license which gives you legal
permission to copy, distribute and/or modify the library.

   Also, for each distributor's protection, we want to make certain
that everyone understands that there is no warranty for this free
library.  If the library is modified by someone else and passed on, we
want its recipients to know that what they have is not the original
version, so that any problems introduced by others will not reflect on
the original authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that companies distributing free
software will individually obtain patent licenses, thus in effect
transforming the program into proprietary software.  To prevent this,
we have made it clear that any patent must be licensed for everyone's
free use or not licensed at all.

   Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License, which was designed for utility
programs.  This license, the GNU Library General Public License,
applies to certain designated libraries.  This license is quite
different from the ordinary one; be sure to read it in full, and don't
assume that anything in it is the same as in the ordinary license.

   The reason we have a separate public license for some libraries is
that they blur the distinction we usually make between modifying or
adding to a program and simply using it.  Linking a program with a
library, without changing the library, is in some sense simply using
the library, and is analogous to running a utility program or
application program.  However, in a textual and legal sense, the linked
executable is a combined work, a derivative of the original library,
and the ordinary General Public License treats it as such.

   Because of this blurred distinction, using the ordinary General
Public License for libraries did not effectively promote software
sharing, because most developers did not use the libraries.  We
concluded that weaker conditions might promote sharing better.

   However, unrestricted linking of non-free programs would deprive the
users of those programs of all benefit from the free status of the
libraries themselves.  This Library General Public License is intended
to permit developers of non-free programs to use free libraries, while
preserving your freedom as a user of such programs to change the free
libraries that are incorporated in them.  (We have not seen how to
achieve this as regards changes in header files, but we have achieved
it as regards changes in the actual functions of the Library.)  The
hope is that this will lead to faster development of free libraries.

   The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, while the latter only
works together with the library.

   Note that it is possible for a library to be covered by the ordinary
General Public License rather than by this special one.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library which
     contains a notice placed by the copyright holder or other
     authorized party saying it may be distributed under the terms of
     this Library General Public License (also called "this License").
     Each licensee is addressed as "you".

     A "library" means a collection of software functions and/or data
     prepared so as to be conveniently linked with application programs
     (which use some of those functions and data) to form executables.

     The "Library", below, refers to any such software library or work
     which has been distributed under these terms.  A "work based on the
     Library" means either the Library or any derivative work under
     copyright law: that is to say, a work containing the Library or a
     portion of it, either verbatim or with modifications and/or
     translated straightforwardly into another language.  (Hereinafter,
     translation is included without limitation in the term
     "modification".)

     "Source code" for a work means the preferred form of the work for
     making modifications to it.  For a library, complete source code
     means all the source code for all modules it contains, plus any
     associated interface definition files, plus the scripts used to
     control compilation and installation of the library.

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running a program using the Library is not restricted, and
     output from such a program is covered only if its contents
     constitute a work based on the Library (independent of the use of
     the Library in a tool for writing it).  Whether that is true
     depends on what the Library does and what the program that uses
     the Library does.

  1. You may copy and distribute verbatim copies of the Library's
     complete source code as you receive it, in any medium, provided
     that you conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and distribute a copy of this License
     along with the Library.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Library or any portion
     of it, thus forming a work based on the Library, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. The modified work must itself be a software library.

       b. You must cause the files modified to carry prominent notices
          stating that you changed the files and the date of any change.

       c. You must cause the whole of the work to be licensed at no
          charge to all third parties under the terms of this License.

       d. If a facility in the modified Library refers to a function or
          a table of data to be supplied by an application program that
          uses the facility, other than as an argument passed when the
          facility is invoked, then you must make a good faith effort
          to ensure that, in the event an application does not supply
          such function or table, the facility still operates, and
          performs whatever part of its purpose remains meaningful.

          (For example, a function in a library to compute square roots
          has a purpose that is entirely well-defined independent of the
          application.  Therefore, Subsection 2d requires that any
          application-supplied function or table used by this function
          must be optional: if the application does not supply it, the
          square root function must still compute square roots.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Library, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Library, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Library.

     In addition, mere aggregation of another work not based on the
     Library with the Library (or with a work based on the Library) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
     License instead of this License to a given copy of the Library.
     To do this, you must alter all the notices that refer to this
     License, so that they refer to the ordinary GNU General Public
     License, version 2, instead of to this License.  (If a newer
     version than version 2 of the ordinary GNU General Public License
     has appeared, then you can specify that version instead if you
     wish.)  Do not make any other change in these notices.

     Once this change is made in a given copy, it is irreversible for
     that copy, so the ordinary GNU General Public License applies to
     all subsequent copies and derivative works made from that copy.

     This option is useful when you wish to copy part of the code of
     the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
     derivative of it, under Section 2) in object code or executable
     form under the terms of Sections 1 and 2 above provided that you
     accompany it with the complete corresponding machine-readable
     source code, which must be distributed under the terms of Sections
     1 and 2 above on a medium customarily used for software
     interchange.

     If distribution of object code is made by offering access to copy
     from a designated place, then offering equivalent access to copy
     the source code from the same place satisfies the requirement to
     distribute the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
     Library, but is designed to work with the Library by being
     compiled or linked with it, is called a "work that uses the
     Library".  Such a work, in isolation, is not a derivative work of
     the Library, and therefore falls outside the scope of this License.

     However, linking a "work that uses the Library" with the Library
     creates an executable that is a derivative of the Library (because
     it contains portions of the Library), rather than a "work that
     uses the library".  The executable is therefore covered by this
     License.  Section 6 states terms for distribution of such
     executables.

     When a "work that uses the Library" uses material from a header
     file that is part of the Library, the object code for the work may
     be a derivative work of the Library even though the source code is
     not.  Whether this is true is especially significant if the work
     can be linked without the Library, or if the work is itself a
     library.  The threshold for this to be true is not precisely
     defined by law.

     If such an object file uses only numerical parameters, data
     structure layouts and accessors, and small macros and small inline
     functions (ten lines or less in length), then the use of the object
     file is unrestricted, regardless of whether it is legally a
     derivative work.  (Executables containing this object code plus
     portions of the Library will still fall under Section 6.)

     Otherwise, if the work is a derivative of the Library, you may
     distribute the object code for the work under the terms of Section
     6.  Any executables containing that work also fall under Section 6,
     whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also compile or
     link a "work that uses the Library" with the Library to produce a
     work containing portions of the Library, and distribute that work
     under terms of your choice, provided that the terms permit
     modification of the work for the customer's own use and reverse
     engineering for debugging such modifications.

     You must give prominent notice with each copy of the work that the
     Library is used in it and that the Library and its use are covered
     by this License.  You must supply a copy of this License.  If the
     work during execution displays copyright notices, you must include
     the copyright notice for the Library among them, as well as a
     reference directing the user to the copy of this License.  Also,
     you must do one of these things:

       a. Accompany the work with the complete corresponding
          machine-readable source code for the Library including
          whatever changes were used in the work (which must be
          distributed under Sections 1 and 2 above); and, if the work
          is an executable linked with the Library, with the complete
          machine-readable "work that uses the Library", as object code
          and/or source code, so that the user can modify the Library
          and then relink to produce a modified executable containing
          the modified Library.  (It is understood that the user who
          changes the contents of definitions files in the Library will
          not necessarily be able to recompile the application to use
          the modified definitions.)

       b. Accompany the work with a written offer, valid for at least
          three years, to give the same user the materials specified in
          Subsection 6a, above, for a charge no more than the cost of
          performing this distribution.

       c. If distribution of the work is made by offering access to copy
          from a designated place, offer equivalent access to copy the
          above specified materials from the same place.

       d. Verify that the user has already received a copy of these
          materials or that you have already sent this user a copy.

     For an executable, the required form of the "work that uses the
     Library" must include any data and utility programs needed for
     reproducing the executable from it.  However, as a special
     exception, the source code distributed need not include anything
     that is normally distributed (in either source or binary form)
     with the major components (compiler, kernel, and so on) of the
     operating system on which the executable runs, unless that
     component itself accompanies the executable.

     It may happen that this requirement contradicts the license
     restrictions of other proprietary libraries that do not normally
     accompany the operating system.  Such a contradiction means you
     cannot use both them and the Library together in an executable
     that you distribute.

  7. You may place library facilities that are a work based on the
     Library side-by-side in a single library together with other
     library facilities not covered by this License, and distribute
     such a combined library, provided that the separate distribution
     of the work based on the Library and of the other library
     facilities is otherwise permitted, and provided that you do these
     two things:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities.  This must be distributed under the terms of the
          Sections above.

       b. Give prominent notice with the combined library of the fact
          that part of it is a work based on the Library, and explaining
          where to find the accompanying uncombined form of the same
          work.

  8. You may not copy, modify, sublicense, link with, or distribute the
     Library except as expressly provided under this License.  Any
     attempt otherwise to copy, modify, sublicense, link with, or
     distribute the Library is void, and will automatically terminate
     your rights under this License.  However, parties who have
     received copies, or rights, from you under this License will not
     have their licenses terminated so long as such parties remain in
     full compliance.

  9. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Library or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Library (or any work
     based on the Library), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Library or works based on it.

 10. Each time you redistribute the Library (or any work based on the
     Library), the recipient automatically receives a license from the
     original licensor to copy, distribute, link with or modify the
     Library subject to these terms and conditions.  You may not impose
     any further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

 11. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Library at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Library by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Library.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply, and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

 12. If the distribution and/or use of the Library is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Library under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

 13. The Free Software Foundation may publish revised and/or new
     versions of the Library General Public License from time to time.
     Such new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Library specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Library
     does not specify a license version number, you may choose any
     version ever published by the Free Software Foundation.

 14. If you wish to incorporate parts of the Library into other free
     programs whose distribution conditions are incompatible with these,
     write to the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting
     the sharing and reuse of software generally.

                                NO WARRANTY

 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU.  SHOULD THE
     LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY
     OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Libraries
==============================================

   If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of
the ordinary General Public License).

   To apply these terms, attach the following notices to the library.
It is safest to attach them to the start of each source file to most
effectively convey the exclusion of warranty; and each file should have
at least the "copyright" line and a pointer to where the full notice is
found.

     ONE LINE TO GIVE THE LIBRARY'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) YEAR  NAME OF AUTHOR
     
     This library is free software; you can redistribute it and/or modify it
     under the terms of the GNU Library General Public License as published
     by the Free Software Foundation; either version 2 of the License, or (at
     your option) any later version.
     
     This library is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Library General Public License for more details.
     
     You should have received a copy of the GNU Library General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Also add information on how to contact you by electronic and paper
mail.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the library,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the library
     `Frob' (a library for tweaking knobs) written by James Random Hacker.
     
     SIGNATURE OF TY COON, 1 April 1990
     Ty Coon, President of Vice

   That's all there is to it!


File: conflib.info,  Node: overview,  Next: configuration files,  Prev: Copying,  Up: Top

Overview
********

   The library allows flexible runtime configuration. It's both simple
and powerful, and it's still reasonable simple if you choose to use the
power. It has support for many simple and not so simple data types,
including enumerations, arrays and lists.

   There are functions to read and write configuration files.  It
should be possible to write a configuration file editor (hey, there is
`vi' already - why another editor? Don't waste your time).


File: conflib.info,  Node: configuration files,  Next: programming,  Prev: overview,  Up: Top

Configuration Files
*******************

   Configuration files consist of one or more blocks, called `stanza'
(i believe this comes from `AIX'), in which values are assigned to
variables.

* Menu:

* lines::                 how lines are treated
* stanzas::               blocks in configuration files
* comments::              line- and block comments
* variables::             variable types
* includes::              including other configuration files
* special constructs::    append, override, forcing interpretation


File: conflib.info,  Node: lines,  Next: stanzas,  Prev: configuration files,  Up: configuration files

Lines In The Configuration File
===============================

   At the moment lines may be up to 1024 characters long. Long lines
may be splitted, but the 1024 character limit stays (splitted lines
count as one line).

   To mark a line as splitted escape the last character with a
backslash (`\').

     # This is a  \
       comment line
     var=a long \
     value

   is equal to:

     # This is a     comment line
     var=a long value

   Whitespace is preserved except at the begin and the and of the line
after glueing together the splittet lines.  The backslash and the
lineend simply vanish.


File: conflib.info,  Node: stanzas,  Next: comments,  Prev: lines,  Up: configuration files

Stanzas in configuration files
==============================

   Each stanza consist of a label line and zero to many variable
assignments (this basically means: a stanza may be totally empty).

   The label line ends with a colon and has no equals sign (`=') in it.
Before the colon are one or more words (separated with white space).
Each one is a name for this stanza. Alternatively you may include the
label in brackets (<[> and <]>), but then you must use only one stanza
name on that line (this is not a serious problem).

   Names may be found in different label lines (i.e. in different
stanzas).  Each stanza with this name will be read if the stanza is
read, making it possible to share assignments between many stanzas (but
there are better ways, see *Note includes::).

   A stanza ends with the next stanza, or the end of the file.

   An example:

     stanza1:
         variable1="hallo"
     [stanza2]
         variable2="hallo Du"
     stanza1 stanza3:
         variable3="Hallo Du da"

   If the stanza `stanza1' is read then `variable1' and `variable3' are
set to the new values. If `stanza3' is read then only `variable3' it
set.

   It is possible to read all stanzas matching a certain wildcard. To do
this one gives a wildcard pattern instead of a stanza name to
`cl_getstanza'. This is called a `wildcard read'. For more details see
*Note cl_getstanza: reading and writing.

   In the following example all stanzas will be read if `*ab*' is used
as a pattern:

     aber:
     ab:
     hinab:


File: conflib.info,  Node: comments,  Next: variables,  Prev: stanzas,  Up: configuration files

Comments in Configuration Files
===============================

   Two kinds of comments are recognized. This first is a
one-line-comment, on a line beginning with a `#' (whitespace before
this will be ignored). A comment line is ignored. The following are
legal comments:

     # comment
     #        comment
             #comment

   but the following are not recognized as comments:

     var=value # assign a new value
     label: # a new stanza begins

   The second line is completely ignored, the first one assigns `value
# assign a new value' to var.

   The second kind of comments are block comments. They begin with a
line beginning with `##' (again, whitespace before this will be
ignored), and end with the next such line. Example

     # the next line begins a block comment
     ## block comment starts here
     ....
     ## block comments end here

   The following is no good style, but possible:

     label1:
         var1=value
     # label2 is not needed anymore \
     label2:
         var2=value


File: conflib.info,  Node: variables,  Next: includes,  Prev: comments,  Up: configuration files

Variables in Configuration Files
================================

   Variables get there values through assignment in the configuration
files. An assignment looks like this:

     variable_name=value

   Whitespace bevor the equals sign are ignored, whitespace after is is
ignored. Whitespace at the end of the line is ignored.

   Variable names are caseinsensitive. No difference between minus sign
and underscore is made, they are treated as equal.

   There are many different variable types:

BOOLEAN
     Boolean variables get a `true' value assigned if the string begins
     with one of `tTyYjJwW]' and a `false' value if the string starts
     with one of `fFnN'. If none of these character matches the string
     is treated as number, and `true' is assigned if the number is not
     zero.

     The following assignment are `true':

        * var=true

        * var=wahr

        * var=99

        * var=-1

     and these are false:

        * var=false

        * var=nein

        * var=0

        * var=x

SHORT
     a short number. The typical values range from -32768 to 32767.

NUMBER
     a long number. The typical value range is {+|-}2^32.

STRING
     a string.

STRING ARRAY
     a array of strings. Each assignment to the variable fills another
     element in the string array. The maximal number of strings in one
     array is limited, see *Note limits::.

ENUMERATIONS

CHARACTERS

DIRECTORY NAMES

File: conflib.info,  Node: includes,  Next: special constructs,  Prev: variables,  Up: configuration files

Including Stanzas And Files
===========================

 - Command: includestanza STANZANAME
     Includes the stanza STANZANAME as part of the stanza read at the
     time the `includestanza' statement is found.

 - Command: include FILENAME [STANZANAME]
     Includes the stanza STANZANAME from the configuration files
     FILENAME. If STANZANAME is left out the whole configuration file
     is read (you can achieve the same with writing `include FILENAME
     *'.


File: conflib.info,  Node: special constructs,  Prev: includes,  Up: configuration files

Special constructs in the configuration file
============================================

`var ~= value'
     forces interpretation of VALUE. This is controlled by an array of
     tip_t either attached to the configuration file handle or
     statically compiled into the library. The one included in the
     library contains:
          static tip_t cl_tiptab[]={
              { '\0', "${literal",   0, tip_literal },
              { '\\', NULL,        0, tip_backslash },
              { '~',  NULL,        0, tip_tilde },
              { '\0', "$[",        0, tip_conditional },
              { '\0', "${strip",   0, tip_strip },
              { '\0', "${force",   0, tip_force },
              { '\0', "${macro",   0, tip_macro },
              { '\0', "${defmacro",   0, tip_defmacro },
              { '\0', "${undefmacro",   0, tip_undefmacro },
              { '$',  NULL,        0, tip_dollar },
              { '\0', NULL,        0, NULL }
          };
     a `tip_t' table attache

`append var = value'
     appends VALUE to the actual value of the VAR. This is only
     recognized for CL_STRING (where both strings are concatenated with
     a space sign in between) and CL_DIRNAME (where old and new value
     are simply glued together) and ignored otherwise.

`override var = value'
     resets the VAR before parsing VALUE, and is only recognized for
     CL_LIST and CL_BITFIELD. Example:

          bitfield=bit0
          bitfield=bit2

     and

          bitfield=bit0|bit2

     lead to equal results. The same is true for

          bitfield=bit0
          override bitfield=bit2

     and

          bitfield=bit2


File: conflib.info,  Node: programming,  Next: Ersetzung,  Prev: configuration files,  Up: Top

Using the library
*****************

   For using the library only a few changes to your program are needed.
Your need to create a configuration table, which assigns the
configuration variables to internal program variables, and to call the
functions to read the configuration file.

* Menu:

* simple example::             a simple example
* configfile handle::          configuration file handles
* variable definition::        how to define a variable
* enumerations::               how to use enumerations
* alias::                      using alias names
* lists::                      using lists
* bitfields::                  using bitfields
* configuration table::        Interface between library and program

* easy reading::               a highlevel interface

* open and close::             open and close a configuration file
* reading and writing::        reading and writing the configuration
* analyzing::                  analyze a configuration file
* searching::                  searching functions
* cleaning up::                cleaning up the mess
* misc functions::             some other functions

* unknown variables::          handling of unknown variables

* limits::                     limits of the Library


File: conflib.info,  Node: simple example,  Next: configfile handle,  Prev: programming,  Up: programming

A Simple Example
================

   This example show a program using two configuration variables. One of
those may be overridden through an environment variable. It uses a
configuration file which is not splitted into stanzas.

     #include "ownstd.h"
     
     #include <stdlib.h>
     #include <stdio.h>
     #include <ctype.h>
     #include <time.h>
     
     #ifdef HAVE_UNISTD_H
     #  include <unistd.h>
     #endif
     
     #include "conflib.h"
     #include "tinterp.h"
     
     char *action;
     char *tmpdir;
     
     cl_var_t tab[] =
     {
       { "action",    NULL,       CL_STRING,  &action     ,0          ,NULL },
       { "tmpdir",    "TMP",      CL_DIRNAME, &tmpdir     ,CL_PREENV  ,NULL },
       { NULL,NULL,0,NULL,0 }
     };
     
     int main(void)
     {
       int result;
     
       result = cl_getconf("simple.cnf",tab);
       if (result != 0)
       {
         fprintf(stderr,"cannot read simple.cnf");
         exit(1);
       }
     
       printf("tmpdir=%s\n",tmpdir ? tmpdir : "not set");
       printf("action=%s\n",action ? action : "none");
       exit 0;
     }

   No magic is involved. `cl_getconf' is the function which reads the
configuration file. *Note cl_getconf: easy reading.


File: conflib.info,  Node: configfile handle,  Next: variable definition,  Prev: simple example,  Up: programming

The Configuration File Handle
=============================

   There are two ways to read more then one stanza from a configuration
file. The first is more simple, it just reads each stanza with a call
to `cl_getconfstanza', see *Note cl_getconfstanza: easy reading.  This
is indeed possible, but slow: For every stanza the file has to be
opened, searched and closed again.

   A better way would be to open the file once, scan it once, read it
often and close once. To do so a lot of information has to be
preserved. This information is saved in the "configuration file handle".

 - Data Type: cl_file_t
     The `cl_file_t' data structure is used to hold information the
     configuration file. It has many members, but there are only a few
     a program should deal with:

    `int report_unknown'
          set this to one if you wish the reading function to print out
          a warning if it finds a variable not described in the
          configuration table.

     *Never* use the file handle (i might switch to mmap one day), and
     *never* change anything except `report_unknown'.

   Many programs don't need this.


File: conflib.info,  Node: variable definition,  Next: enumerations,  Prev: configfile handle,  Up: programming

The data structure that describes a configuration variable
==========================================================

 - Data Type: cl_var_t
     The `cl_var_t' data structure is used to hold information about an
     configuration variable. At the time i write this down it has the
     following members:

    `const char *varname'
          The name of the variable. It is used case insensitive, and
          underscores and minus are treated as the same character.

    `const char *secdata'
          used for multiple purposes in dependency of flags and variable
          type.

    `enum cl_var_typ typ'
          the type of the variable

    `void *adr'
          the address to write the variables value to.

    `unsigned long flags'
          flags.

    `const char *rangeexp;'
          A wildcard or regular expression, used for rangechecks on the
          variables value.

     FLAGS is a bitfield. For the moment the following bits are defined:

    `CL_MALLOCED'
          The memory `adr' points to is dynamically allocated and should
          be freed (this is done by cl_clearconf (*note cl_clearconf:
          cleaning up.)  and if this variable is overwritten by a
          library function).

    `CL_PREENV'
          If this bit is set the library will, before it actually reads
          a stanza or a whole configuration file, read the environment
          variable with the name given in SECDATA into the configuration
          variable.

          This can be done for the data types `CL_STRING', `CL_DIRNAME',
          `CL_CHAR', `CL_NUM', `CL_NUMSHORT' and `CL_BOOLEAN'.  The bit
          is ignored fo any other type.

    `CL_POSTENV'
          Like CL_PREENV, but the environment is read *after* the
          reading of the configuration file.

    `CL_VAR_NOT_DONE'
          *internal use only*.

    `CL_MAY_SAVE'
          Set this bit if `cl_putstanza' shall save this variable.
          *Note cl_putstanza: reading and writing.

    `CL_RANGE_REGEX'
          If this bit is set then a range check will be done before a
          new value is assigned to the variable. If this fails the new
          value is not assign.

          The range check is done with a casesensitive regular
          expression match against the string in RANGEEXP.

          No regular expression rangecheck will be done if your systems
          library does not support POSIX regular expressions-

    `CL_RANGE_WILDCARD'
          Like CL_RANGE_REGEX, but the match is done as a casesensitive
          wildcard match. This functionality is available even if the c
          library has no fnmatch function.

    `CL_WARNING'
          Warn if this variable is used.


 - Data Type: enum cl_var_typ
     This enumerated type describes what the kind of variable.  Here
     are the possible values:

    `CL_STRING'
          a simple string. ADR should be of type `char **'.

    `CL_NUM'
          a long integer. ADR should be of type `long *'.

    `CL_NUMSHORT'
          a short integer. ADR should be of type `short *'.

    `CL_BOOLEAN'
          a boolean. ADR should be of type `int *'.

    `CL_ARRAY'
          an array of simple strings. ADR should be of type `char
          *xxx[CL_MAXARRAY]'.

    `CL_ENUM'
          an enumeration. ADR should be of type `long *'.  *Note
          enumerations:: for more information.

    `CL_ALIAS'
          an alias for another variable, very often used for
          compatability with older versions. *Note alias::.

          ADR is ignored. SECDATA should hold the name of the variable
          this one is an alias for.

    `CL_DUMMY'
          this variable will be completely ignored.

    `CL_LIST'
          a list. ADR should be of type CL_LIST_T **.

    `CL_CHAR'
          a single character. ADR should be of the CHAR *.

          Any character after the first is ignored.

    `CL_DIRNAME'
          a directory name. Basically the same as `CL_STRING', but a
          slash (`/') ist appended, if it does end with another
          character.


File: conflib.info,  Node: enumerations,  Next: alias,  Prev: variable definition,  Up: programming

enumerations
============

   enumerations are described with this data type:

 - Data Type: cl_enum_t
    `char *magic'
          This string has to be found in the configuration file.

    `long value'
          The value to be assigned to the configuration variable.


   The SECDATA element of an enumeration variable (*Note variable
definition::) points to an array of cl_enum_t. This array is terminated
with an element with MAGIC `NULL'.

   An example:

     cl_enum_t zahlen[]=
     {
     {   "Null",   0 }, {    "Zero",   0 },
     {   "Eins",   1 }, {    "One",    1 },
     {   "Zwei",   2 }, {    "Two",    2 },
     {   "Drei",   3 }, {    "Three",  3 },
     {   "Vier",   4 }, {    "Four",   4 },
     {   "Fuenf",  5 }, {    "Five",   5 },
     {   "Sechs",  6 }, {    "Six",    6 },
     {   "Sieben", 7 }, {    "Seven",  7 },
     {   "Acht",   8 }, {    "Eight",  8 },
     {   "Neun",   9 }, {    "Nine",   9 },
     {   NULL,     0 }
     };
     long value;
     cl_var_t Tab[] =
     {
         { "value", zahlen, CL_ENUM, &value, 0,NULL},
         { NULL,NULL,0,NULL,0 }
     };


File: conflib.info,  Node: alias,  Next: lists,  Prev: enumerations,  Up: programming

other names for variables
=========================

   An alias makes it possible to use two or more names for the same
configuration variable. This is useful to be able to read old
configuration files even if some variables have changed their names.

   The alias gets an element in the configuration table, with an own
and uniq name in the VARNAME element, and the name of the real variable
in SECDATA.

   If the variable in SECDATA is not found the functions will return an
error (i still think it should simply call abort()). Fix your software.

   An alias may point to another alias.


File: conflib.info,  Node: lists,  Next: bitfields,  Prev: alias,  Up: programming

Lists
=====

   Lists are lines in the configuration file, which are taken apart by
cl_getstanza (*note cl_getstanza: reading and writing.). The elements
are separated with special characters.

   The default separators are horizontal tabulator, space and colon,
but you can change that with the SECDATA element of the variable
description (*note secdata: variable definition.).

 - Data Type: cl_list_t
     This structure describes a list element. It contains the following
     members:

    `char *inhalt'
          the value of the list element

    `struct cl_list_t *next'
          points to the next list element.


   A list may be splitted into many lines. An example:

     list=Hello
     list=world

   The next example gives an identical result:

     list=Hello world

   Separators are ignored if they follow another separator. The
following examples results a list containing `Hello' and `world':

     list=Hello: world

   Example:

     cl_list_t *list;
     cl_list_t *ptr;
     
     cont_f tab[]=
     {
     	{ "list", ": ,\t",      CL_LIST,      &list     ,0 },
     	{ NULL,NULL,0,NULL,0 }
     }
     cl_getconf("config.cnf",tab);
     for (ptr=list; ptr != NULL; ptr=prt->next)
         puts(ptr->inhalt);


File: conflib.info,  Node: bitfields,  Next: configuration table,  Prev: lists,  Up: programming

Bitfields
=========

   Bitfields are simple but powerful constructs which can often be used
to put many related boolean variables in a single variable.

   Their implementation is much like that of the enumerations, see
*Note enumerations::, especially they are described by the same data
type cl_enum_t (*note cl_enum_t: enumerations..  A significant
difference is that enumerations are saved as signed longs, bitfields as
unsigned longs.

   Words can have a <!> as prefix, meaning `negate this bit'.

   Here is an example of their usage in a program:

     cl_enum_t bitfield_enum[]=
     {
     {   "bit0",   1 },
     {   "bit1",   2 },
     {   "bit2",   4 },
     {   "bit3",   8 },
     {   "bit4",   16 },
     {   "bit5",   32 },
     {   "bit6",   64 },
     {   "bit7",   128 },
     {   NULL,     0 }
     };
     unsigned long bitfield;
     cl_var_t Tab[] = {
         { "bitfield",  bitfield_enum, CL_BITFIELD,&bitfield,0          ,NULL },
     [etc]

   and an example of a configuration file:

       bitfield=bit2|bit7
       bitfield=bit2|bit7|!bit6|!!bit5


File: conflib.info,  Node: configuration table,  Next: easy reading,  Prev: bitfields,  Up: programming

The Configuration Table
=======================

   The configuration table is the interface between program and library.
It's an array of `cl_var_t' (*note variable definition::.), terminated
with an `NULL' element. Each array element describes a variable.

   Example:

     short numshort;
     long num;
     int  bool_true;
     int  bool_false;
     char *stanza;
     char *array[CL_MAXARRAY]={NULL};
     
     cl_var_t Tab[] =
     {
         { "numshort",   "Enumshort",   CL_NUMSHORT,  &numshort ,CL_POSTENV},
         { "num",        "Enum",        CL_NUM,       &num        ,0},
         { "bool_false", "Ebool_false", CL_BOOLEAN,   &bool_false ,0},
         { "bool_true",  "Ebool_true",  CL_BOOLEAN,   &bool_true  ,0},
         { "string",     "Estring",     CL_STRING,    &string     ,0},
         { "array",      "Earray",      CL_ARRAY,     array       ,0},
         { NULL,NULL,0,NULL ,0}
     };

   The line
         { "numshort",   "Enumshort",   CL_NUMSHORT,  &numshort ,CL_POSTENV},
   describes a variable with the name `numshort'. It's a short number
(`CL_NUMSHORT'), and the value is written into the C variable
`numshort'. It the environment variable `Enumshort' is set it overrides
the value in the configuration file.

